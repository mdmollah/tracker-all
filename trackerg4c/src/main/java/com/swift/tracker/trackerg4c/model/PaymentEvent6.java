/*
 * gpi Corporate API
 * Move your app forward with the gpi Corporate API
 *
 * OpenAPI spec version: 2.0.2-sandbox
 * Contact: Li.JIE@swift.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.swift.tracker.trackerg4c.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.swift.tracker.trackerg4c.model.ActiveOrHistoricCurrencyAndAmount;
import com.swift.tracker.trackerg4c.model.ChargeBearerType3Code;
import com.swift.tracker.trackerg4c.model.CurrencyExchange8;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Contains information coming from the related MT 199 or MT 103, or the StatusConfirmationUpdate.
 */
@ApiModel(description = "Contains information coming from the related MT 199 or MT 103, or the StatusConfirmationUpdate.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-30T10:36:31.126-05:00")
public class PaymentEvent6 {
  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("charge_bearer")
  private ChargeBearerType3Code chargeBearer = null;

  @SerializedName("charge_amount")
  private ActiveOrHistoricCurrencyAndAmount chargeAmount = null;

  @SerializedName("foreign_exchange_details")
  private CurrencyExchange8 foreignExchangeDetails = null;

  public PaymentEvent6 from(String from) {
    this.from = from;
    return this;
  }

   /**
   * The sending MessagingEndpoint that has created this Business Message for the receiving MessagingEndpoint that will process this Business Message.    Note the sending MessagingEndpoint might be different from the sending address potentially contained in the transport header (as defined in the transport layer).
   * @return from
  **/
  @ApiModelProperty(required = true, value = "The sending MessagingEndpoint that has created this Business Message for the receiving MessagingEndpoint that will process this Business Message.    Note the sending MessagingEndpoint might be different from the sending address potentially contained in the transport header (as defined in the transport layer).")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public PaymentEvent6 to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The MessagingEndpoint designated by the sending MessagingEndpoint to be the recipient who will ultimately process this Business Message.    Note the receiving MessagingEndpoint might be different from the receiving address potentially contained in the transport header (as defined in the transport layer).
   * @return to
  **/
  @ApiModelProperty(value = "The MessagingEndpoint designated by the sending MessagingEndpoint to be the recipient who will ultimately process this Business Message.    Note the receiving MessagingEndpoint might be different from the receiving address potentially contained in the transport header (as defined in the transport layer).")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public PaymentEvent6 chargeBearer(ChargeBearerType3Code chargeBearer) {
    this.chargeBearer = chargeBearer;
    return this;
  }

   /**
   * Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
   * @return chargeBearer
  **/
  @ApiModelProperty(value = "Specifies which party/parties will bear the charges associated with the processing of the payment transaction.")
  public ChargeBearerType3Code getChargeBearer() {
    return chargeBearer;
  }

  public void setChargeBearer(ChargeBearerType3Code chargeBearer) {
    this.chargeBearer = chargeBearer;
  }

  public PaymentEvent6 chargeAmount(ActiveOrHistoricCurrencyAndAmount chargeAmount) {
    this.chargeAmount = chargeAmount;
    return this;
  }

   /**
   * Amount of money asked or paid for the charge.
   * @return chargeAmount
  **/
  @ApiModelProperty(value = "Amount of money asked or paid for the charge.")
  public ActiveOrHistoricCurrencyAndAmount getChargeAmount() {
    return chargeAmount;
  }

  public void setChargeAmount(ActiveOrHistoricCurrencyAndAmount chargeAmount) {
    this.chargeAmount = chargeAmount;
  }

  public PaymentEvent6 foreignExchangeDetails(CurrencyExchange8 foreignExchangeDetails) {
    this.foreignExchangeDetails = foreignExchangeDetails;
    return this;
  }

   /**
   * Specifies the exchange rate details between two currencies.
   * @return foreignExchangeDetails
  **/
  @ApiModelProperty(value = "Specifies the exchange rate details between two currencies.")
  public CurrencyExchange8 getForeignExchangeDetails() {
    return foreignExchangeDetails;
  }

  public void setForeignExchangeDetails(CurrencyExchange8 foreignExchangeDetails) {
    this.foreignExchangeDetails = foreignExchangeDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentEvent6 paymentEvent6 = (PaymentEvent6) o;
    return Objects.equals(this.from, paymentEvent6.from) &&
        Objects.equals(this.to, paymentEvent6.to) &&
        Objects.equals(this.chargeBearer, paymentEvent6.chargeBearer) &&
        Objects.equals(this.chargeAmount, paymentEvent6.chargeAmount) &&
        Objects.equals(this.foreignExchangeDetails, paymentEvent6.foreignExchangeDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, chargeBearer, chargeAmount, foreignExchangeDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentEvent6 {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    chargeBearer: ").append(toIndentedString(chargeBearer)).append("\n");
    sb.append("    chargeAmount: ").append(toIndentedString(chargeAmount)).append("\n");
    sb.append("    foreignExchangeDetails: ").append(toIndentedString(foreignExchangeDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

